"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Send = require("../fb-api/send");
const UserProfile = require("../fb-api/user-profile");
const Webhook = require("../fb-api/webhook");
const logger_1 = require("../logger");
const chat_1 = require("./chat");
const router_service_1 = require("./router-service");
class ResponderService extends router_service_1.RouterService {
    constructor(accessToken) {
        super();
        this.accessToken = accessToken;
        this.hearHandlers = new Array();
        this.chats = new Map();
        this.sendApi = new Send.Api(accessToken);
        this.userProfileApi = new UserProfile.Api(accessToken);
        this.post("/", (req, res, next) => {
            logger_1.logger.debug("webhook post request received:", JSON.stringify(req.body));
            logger_1.logger.debug("returning 200 OK");
            res.status(200).end();
            if (!req.body.object || req.body.object !== "page" || !req.body.entry) {
                throw new Error("unknown request");
            }
            req.body.entry.forEach((entry) => {
                logger_1.logger.info(`received meesage for page https://www.facebook.com/${entry.id}`);
                entry.messaging.forEach((item) => {
                    const chat = this.chats.get(item.sender.id) || (() => {
                        const newChat = new chat_1.Chat(item.sender.id, this.sendApi, this.userProfileApi);
                        this.chats.set(item.sender.id, newChat);
                        return newChat;
                    })();
                    if (item.message) {
                        if (item.message.quick_reply) {
                            this.processQuickReply(item.message, chat);
                        }
                        else if (item.message.text) {
                            this.processTextMessage(item.message, chat);
                        }
                        else if (item.message.attachments) {
                            this.processAttachment(item.message, chat);
                        }
                        else if (item.message.is_echo) {
                            this.processEcho(item.message, chat);
                        }
                        else {
                            logger_1.logger.warn("received an unknown message item", item);
                        }
                    }
                    else if (item.delivery) {
                        this.processDelivery(item.delivery, chat);
                    }
                    else if (item.read) {
                        this.processRead(item.read, chat);
                    }
                    else if (item.postback) {
                        this.processPostback(item.postback, chat);
                    }
                    else {
                        logger_1.logger.warn("received an unknown message item", item);
                    }
                });
            });
        });
    }
    hear(hooks, handler) {
        hooks.forEach((hook) => {
            logger_1.logger.info("subscribing to text", hook);
            this.hearHandlers.push({ hook, func: handler });
        });
        return this;
    }
    processTextMessage(message, chat) {
        logger_1.logger.debug("received TEXT message", message.mid);
        if (!chat.answer(message.text, this)) {
            this.hearHandlers.forEach((handler) => {
                const matches = handler.hook.exec(message.text);
                if (matches) {
                    logger_1.logger.debug("calling hearing handler", handler.hook);
                    handler.func(chat, message.text, matches.slice(1));
                }
            });
            this.emit(Webhook.Event.TEXT_MESSAGE, chat, message.text);
        }
    }
    processAttachment(message, chat) {
        logger_1.logger.debug("received ATTACHMENT message", message.mid);
        message.attachments.forEach((attachment) => {
            let data;
            switch (attachment.type) {
                case Webhook.AttachmentType.IMAGE:
                case Webhook.AttachmentType.AUDIO:
                case Webhook.AttachmentType.VIDEO:
                case Webhook.AttachmentType.FILE:
                    logger_1.logger.debug("received MEDIA message", attachment.payload.url);
                    data = attachment.payload.url;
                    break;
                case Webhook.AttachmentType.LOCATION:
                    logger_1.logger.debug("received LOCATION message", attachment.title, attachment.payload.coordinates);
                    data = attachment;
                    break;
                default:
                    data = attachment;
                    break;
            }
            this.emit(`${Webhook.Event.ATTACHMENT}:${attachment.type}`, chat, data);
            this.emit(Webhook.Event.ATTACHMENT, chat, data);
        });
    }
    processPostback(postback, chat) {
        const payload = JSON.parse(postback.payload);
        logger_1.logger.debug("recieved POSTBACK from", payload.src, payload.id);
        payload.id && this.emit(`${Webhook.Event.POSTBACK}:${payload.src}:${payload.id}`, chat, payload.data);
        this.emit(`${Webhook.Event.POSTBACK}:${payload.src}`, chat, payload.data);
        this.emit(Webhook.Event.POSTBACK, chat, payload.data);
    }
    processQuickReply(message, chat) {
        logger_1.logger.debug("received QUICK REPLY message", message.mid);
        const payload = JSON.parse(message.quick_reply.payload);
        if (!chat.answer(payload.data ? payload : payload.id, this)) {
            this.emit(`${Webhook.Event.TEXT_QUICK_REPLY}:${payload.id}`, chat, payload.data);
            this.emit(Webhook.Event.TEXT_QUICK_REPLY, chat, payload.data);
        }
    }
    processEcho(message, chat) {
        logger_1.logger.debug("received ECHO for", message.mid);
        this.emit(Webhook.Event.MESSAGE_ECHO, chat, message);
    }
    processDelivery(delivery, chat) {
        logger_1.logger.debug("received DELIVERY confirmations for", (delivery.mids || []).join(","));
        this.emit(Webhook.Event.MESSAGE_DELIVERED, chat, delivery);
    }
    processRead(read, chat) {
        logger_1.logger.debug("received READ confirmation to time", read.watermark);
        this.emit(Webhook.Event.MESSAGE_READ, chat, read);
    }
}
exports.ResponderService = ResponderService;
