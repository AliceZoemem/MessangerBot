"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("async-file");
const axios_1 = require("axios");
const fb_api_1 = require("../fb-api");
const persistent_menu_builder_1 = require("../fb-api-helpers/persistent-menu-builder");
const logger_1 = require("../logger");
class BotUtils {
    constructor(accessToken) {
        this.accessToken = accessToken;
        if (!accessToken) {
            throw new Error("accessToken must by provided");
        }
    }
    sendText(recipientId, text) {
        return this.getSendApi().sendText(recipientId, text);
    }
    sendImage(recipientId, url, reusable) {
        return this.getSendApi().sendImage(recipientId, url, reusable);
    }
    sendAudio(recipientId, url, reusable) {
        return this.getSendApi().sendAudio(recipientId, url, reusable);
    }
    sendVideo(recipientId, url, reusable) {
        return this.getSendApi().sendVideo(recipientId, url, reusable);
    }
    sendFile(recipientId, url, reusable) {
        return this.getSendApi().sendFile(recipientId, url, reusable);
    }
    setGetStartedButton(data) {
        return this.getMessengerProfileApi().setGetStartedButton(data);
    }
    getGetStartedButton() {
        return this.getMessengerProfileApi().getGetStartedButton();
    }
    deleteGetStartedButton() {
        return this.getMessengerProfileApi().deleteGetStartedButton();
    }
    setGreeting(text, locale = "default") {
        return __awaiter(this, void 0, void 0, function* () {
            const greeting = { locale, text };
            return this.getMessengerProfileApi().setGreeting(((yield this.getMessengerProfileApi().getGreeting()) || [])
                .filter((grt) => grt.locale !== locale)
                .concat(greeting));
        });
    }
    getGreeting() {
        return this.getMessengerProfileApi().getGreeting();
    }
    deleteGreeting() {
        return this.getMessengerProfileApi().deleteGreeting();
    }
    setPersistentMenu(menuDef) {
        menuDef instanceof persistent_menu_builder_1.PersistentMenuBuilder || (menuDef = new persistent_menu_builder_1.PersistentMenuBuilder(menuDef));
        return this.getMessengerProfileApi().setPersistentMenu(menuDef.build());
    }
    getPersistentMenu() {
        return this.getMessengerProfileApi().getPersistentMenu();
    }
    deletePersistentMenu() {
        return this.getMessengerProfileApi().deletePersistentMenu();
    }
    getDomainWhitelist() {
        return this.getMessengerProfileApi().getWhitelistedDomains();
    }
    whitelistDomains(domains) {
        return __awaiter(this, void 0, void 0, function* () {
            domains = Array.isArray(domains) ? domains : [domains];
            return this.getMessengerProfileApi().whitelistDomains(((yield this.getMessengerProfileApi().getWhitelistedDomains()) || [])
                .filter((domain) => domains.indexOf(domain) < 0)
                .concat(domains));
        });
    }
    deleteDomainWhitelist() {
        return this.getMessengerProfileApi().deleteDomainWhitelist();
    }
    getAccountLinkingUrl() {
        return this.getMessengerProfileApi().getAccountLinkingUrl();
    }
    setAccountLinkingUrl(url) {
        return this.getMessengerProfileApi().setAccountLinkingUrl(url);
    }
    deleteAccountLinkingUrl() {
        return this.getMessengerProfileApi().deleteAccountLinkingUrl();
    }
    getTargetAudience() {
        return this.getMessengerProfileApi().getTargetAudience();
    }
    openTargetAudience() {
        return this.getMessengerProfileApi().setTargetAudience(fb_api_1.MessengerProfile.TargetAudienceType.ALL);
    }
    closeTargetAudience() {
        return this.getMessengerProfileApi().setTargetAudience(fb_api_1.MessengerProfile.TargetAudienceType.NONE);
    }
    whitelistAudienceCountries(countries) {
        return __awaiter(this, void 0, void 0, function* () {
            let whitelist = Array.isArray(countries) ? countries : [countries];
            const current = yield this.getMessengerProfileApi().getTargetAudience();
            current && current.countries && current.countries.whitelist && (whitelist = whitelist.concat(current.countries.whitelist));
            return this.getMessengerProfileApi().setTargetAudience(fb_api_1.MessengerProfile.TargetAudienceType.CUSTOM, whitelist);
        });
    }
    blacklistAudienceCountries(countries) {
        return __awaiter(this, void 0, void 0, function* () {
            let blacklist = Array.isArray(countries) ? countries : [countries];
            const current = yield this.getMessengerProfileApi().getTargetAudience();
            current && current.countries && current.countries.blacklist && (blacklist = blacklist.concat(current.countries.blacklist));
            return this.getMessengerProfileApi().setTargetAudience(fb_api_1.MessengerProfile.TargetAudienceType.CUSTOM, undefined, blacklist);
        });
    }
    deleteTargetAudience() {
        return this.getMessengerProfileApi().deleteTargetAudience();
    }
    getChatExtensionHomeUrl() {
        return this.getMessengerProfileApi().getChatExtensionHomeUrl();
    }
    setChatExtensionHomeUrl(url, inTest = false, shareButton = true, cliLogger) {
        return __awaiter(this, void 0, void 0, function* () {
            url.charAt(url.length - 1) === "/" || (url = url.concat("/"));
            const whitelist = (yield this.getMessengerProfileApi().getWhitelistedDomains()) || [];
            if (whitelist.indexOf(url) < 0) {
                yield this.getMessengerProfileApi().whitelistDomains([url]);
                cliLogger && cliLogger.info(`Domain '${url}' has been successfully whitelisted`);
            }
            return this.getMessengerProfileApi().setChatExtensionHomeUrl(url, { inTest, shareButton });
        });
    }
    deleteChatExtensionHomeUrl() {
        return this.getMessengerProfileApi().deleteChatExtensionHomeUrl();
    }
    generateMessengerCode(fileName, size, ref) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const uri = yield this.getMessengerCodesApi().generateCode(size, ref);
                logger_1.default.info("Messenger Code successfully generated:", uri);
                const response = yield axios_1.default.get(uri, { responseType: "stream" });
                logger_1.default.info("Messenger Code successfully downloaded:", uri);
                response.data.pipe(yield fs.createWriteStream(fileName));
                logger_1.default.info("Messenger Code successfully saved:", fileName);
            }
            catch (error) {
                return Promise.reject(error);
            }
        });
    }
    getMessengerCodesApi() {
        return this.messengerCodesApi ||
            (this.messengerCodesApi = new fb_api_1.MessengerCodes.Api(this.accessToken));
    }
    getMessengerProfileApi() {
        return this.messengerProfileApi ||
            (this.messengerProfileApi = new fb_api_1.MessengerProfile.Api(this.accessToken));
    }
    getSendApi() {
        return this.sendApi ||
            (this.sendApi = new fb_api_1.Send.Api(this.accessToken));
    }
}
exports.BotUtils = BotUtils;
