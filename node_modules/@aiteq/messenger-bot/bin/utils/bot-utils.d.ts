import { MessengerProfile, Send } from "../fb-api";
import { PersistentMenuBuilder } from "../fb-api-helpers/persistent-menu-builder";
import { PersistentMenuDef } from "../fb-api-helpers/persistent-menu-def";
export declare class BotUtils {
    private accessToken;
    private messengerCodesApi;
    private messengerProfileApi;
    private sendApi;
    constructor(accessToken: string);
    sendText(recipientId: string, text: string): Promise<Send.Response>;
    sendImage(recipientId: string, url: string, reusable?: boolean): Promise<Send.Response>;
    sendAudio(recipientId: string, url: string, reusable?: boolean): Promise<Send.Response>;
    sendVideo(recipientId: string, url: string, reusable?: boolean): Promise<Send.Response>;
    sendFile(recipientId: string, url: string, reusable?: boolean): Promise<Send.Response>;
    setGetStartedButton(data?: any): Promise<MessengerProfile.Response>;
    getGetStartedButton(): Promise<MessengerProfile.GetStartedButton>;
    deleteGetStartedButton(): Promise<MessengerProfile.Response>;
    setGreeting(text: string, locale?: string): Promise<MessengerProfile.Response>;
    getGreeting(): Promise<MessengerProfile.Greeting[]>;
    deleteGreeting(): Promise<MessengerProfile.Response>;
    setPersistentMenu(menuDef: PersistentMenuDef | PersistentMenuDef[] | PersistentMenuBuilder): Promise<MessengerProfile.Response>;
    getPersistentMenu(): Promise<any>;
    deletePersistentMenu(): Promise<MessengerProfile.Response>;
    getDomainWhitelist(): Promise<any>;
    whitelistDomains(domains: string | string[]): Promise<MessengerProfile.Response>;
    deleteDomainWhitelist(): Promise<MessengerProfile.Response>;
    getAccountLinkingUrl(): Promise<string>;
    setAccountLinkingUrl(url: string): Promise<MessengerProfile.Response>;
    deleteAccountLinkingUrl(): Promise<MessengerProfile.Response>;
    getTargetAudience(): Promise<any>;
    openTargetAudience(): Promise<MessengerProfile.Response>;
    closeTargetAudience(): Promise<MessengerProfile.Response>;
    whitelistAudienceCountries(countries: string | string[]): Promise<MessengerProfile.Response>;
    blacklistAudienceCountries(countries: string | string[]): Promise<MessengerProfile.Response>;
    deleteTargetAudience(): Promise<MessengerProfile.Response>;
    getChatExtensionHomeUrl(): Promise<string>;
    setChatExtensionHomeUrl(url: string, inTest?: boolean, shareButton?: boolean, cliLogger?: any): Promise<MessengerProfile.Response>;
    deleteChatExtensionHomeUrl(): Promise<MessengerProfile.Response>;
    generateMessengerCode(fileName: string, size?: number, ref?: string): Promise<void>;
    private getMessengerCodesApi();
    private getMessengerProfileApi();
    private getSendApi();
}
