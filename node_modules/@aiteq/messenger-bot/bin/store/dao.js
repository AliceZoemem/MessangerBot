"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Lowdb = require("lowdb");
class Dao {
    constructor(path, idProperty = "id") {
        this.path = path;
        this.idProperty = idProperty;
        if (!path) {
            throw new Error("path not specified");
        }
        this.db = new Lowdb("./bot-db.json", {
            storage: require("lowdb/lib/storages/file-async")
        })
            .defaults({
            [path]: []
        });
        this.table = this.db.get(path);
    }
    get(id) {
        return this.table.find({ [this.idProperty]: id }).value();
    }
    save(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!entity || !entity[this.idProperty]) {
                return Promise.reject(`couldn't save undefined or entity without ${this.idProperty} property`);
            }
            const existing = this.table.find({ [this.idProperty]: entity[this.idProperty] });
            if (existing.value()) {
                return existing.assign(entity).write();
            }
            else {
                return (yield this.table.push(entity).write())[0];
            }
        });
    }
}
exports.Dao = Dao;
