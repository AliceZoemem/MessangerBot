"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const group_1 = require("../group");
class TargetAudienceGroup extends group_1.Group {
    constructor() {
        super("audience");
    }
    execute(command, botUtils, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let countries;
            switch (command) {
                case "get":
                    const result = yield botUtils.getTargetAudience();
                    return result ?
                        `Target Audience is set to:\n${JSON.stringify(result, null, 2)}` :
                        "Target Audience is not set";
                case "open":
                    yield botUtils.openTargetAudience();
                    return "Target Audience has been open to all";
                case "close":
                    yield botUtils.closeTargetAudience();
                    return "Target Audience has been closed to all";
                case "whitelist":
                    countries = options._.slice(2);
                    if (!countries.length) {
                        return this.usage();
                    }
                    yield botUtils.whitelistAudienceCountries(countries);
                    return "Target Audience whitelist has been successfully updated";
                case "blacklist":
                    countries = options._.slice(2);
                    if (!countries.length) {
                        return this.usage();
                    }
                    yield botUtils.blacklistAudienceCountries(countries);
                    return "Target Audience blacklist has been successfully updated";
                case "delete":
                    yield botUtils.deleteTargetAudience();
                    return "All Target Audience settings have been successfully removed";
                default:
                    return this.usage();
            }
        });
    }
    getUsage() {
        return `Manage Target Audience settings of the Page.
See more about Target Audience at https://developers.facebook.com/docs/messenger-platform/messenger-profile/target-audience.

Usage:

    mbutil ${this.getName()} get [options]
        - show current Target Audience settings

    mbutil ${this.getName()} open [options]
        - open Target Audience for all countries

    mbutil ${this.getName()} close [options]
        - close Target Audience for all countries

    mbutil ${this.getName()} whitelist <country> [countries] [options]
        - add one or more countries (space separated list) to the whitelist
        - use ISO 3166 Alpha-2 codes to identify the countries

    mbutil ${this.getName()} blacklist <country> [countries] [options]
        - add one or more countries (space separated list) to the blacklist
        - use ISO 3166 Alpha-2 codes to identify the countries

    mbutil ${this.getName()} delete [options]
        - remove all Target Audience settings
`;
    }
}
exports.TargetAudienceGroup = TargetAudienceGroup;
