"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("async-file");
const persistent_menu_builder_1 = require("../../fb-api-helpers/persistent-menu-builder");
const group_1 = require("../group");
class PersistentMenuGroup extends group_1.Group {
    constructor() {
        super("menu");
    }
    execute(command, botUtils, options) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (command) {
                case "get":
                    const result = yield botUtils.getPersistentMenu();
                    return result ?
                        `Persistent menu is set: ${JSON.stringify(result, null, 2)}` :
                        "Persistent Menu is not set";
                case "set":
                    if (!options.file) {
                        return this.usage();
                    }
                    yield botUtils.setPersistentMenu(yield this.readFromFile(options.file));
                    return "Persistent Menu has been successfully set";
                case "delete":
                    yield botUtils.deletePersistentMenu();
                    return "Persistent Menu has been successfully removed";
                default:
                    return this.usage();
            }
        });
    }
    getUsage() {
        return `Manage Persistent Menu for the Page.
See more about Persistent Menu at https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu.

Usage:

    mbutil ${this.getName()} get [options]
        - show current Persistent Menu

    mbutil ${this.getName()} set --file <path> [options]
        - set Persistent Menu as defined in the given file

    mbutil ${this.getName()} delete [options]
        - remove Persistent Menu

Options:
    --file <path> - a path to the menu definition file
`;
    }
    readFromFile(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new persistent_menu_builder_1.PersistentMenuBuilder(JSON.parse(yield fs.readTextFile(fileName, "utf8")));
        });
    }
}
exports.PersistentMenuGroup = PersistentMenuGroup;
