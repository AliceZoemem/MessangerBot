"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const group_1 = require("../group");
class AccountLinkingGroup extends group_1.Group {
    constructor() {
        super("accountlinking");
    }
    execute(command, botUtils, options) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (command) {
                case "get":
                    const result = yield botUtils.getAccountLinkingUrl();
                    return result ?
                        `Account Linking URL is set to: ${result}` :
                        "Account Linking URL is not set";
                case "set":
                    if (!options._[2]) {
                        return this.usage();
                    }
                    yield botUtils.setAccountLinkingUrl(options._[2]);
                    return "Account Linking URL has been successfully set";
                case "delete":
                    yield botUtils.deleteAccountLinkingUrl();
                    return "Account Linking URL has been successfully removed";
                default:
                    return this.usage();
            }
        });
    }
    getUsage() {
        return `Manage Account Linking URL.
See more at https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url.

Usage:

    mbutil ${this.getName()} get [options]
        - show current Account Linking URL

    mbutil ${this.getName()} set <url> [options]
        - set a new Account Linking URL

    mbutil ${this.getName()} delete [options]
        - remove the current Account Linking URL
`;
    }
}
exports.AccountLinkingGroup = AccountLinkingGroup;
