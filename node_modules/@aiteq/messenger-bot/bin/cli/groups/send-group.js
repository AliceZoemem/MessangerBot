"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const group_1 = require("../group");
class SendGroup extends group_1.Group {
    constructor() {
        super("send");
    }
    execute(command, botUtils, options) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (command) {
                case "image":
                    if (!options.recipient || !options.url) {
                        return this.usage();
                    }
                    yield botUtils.sendImage(options.recipient, options.url);
                    break;
                case "audio":
                    if (!options.recipient || !options.url) {
                        return this.usage();
                    }
                    yield botUtils.sendAudio(options.recipient, options.url);
                    break;
                case "video":
                    if (!options.recipient || !options.url) {
                        return this.usage();
                    }
                    yield botUtils.sendVideo(options.recipient, options.url);
                    break;
                case "file":
                    if (!options.recipient || !options.url) {
                        return this.usage();
                    }
                    yield botUtils.sendFile(options.recipient, options.url);
                    break;
                default:
                    if (!options.recipient || !options._[1]) {
                        return this.usage();
                    }
                    yield botUtils.sendText(options.recipient, options._[1]);
                    break;
            }
            return `Message has been successfully sent to ${options.recipient}`;
        });
    }
    getUsage() {
        return `Send messages directly to users.

Usage:

    mbutil ${this.getName()} "<text>" --recipient <id> [options]
        - send a plain text message

    mbutil ${this.getName()} image --url <url> --recipient <id> [options]
        - send a message with attached image

    mbutil ${this.getName()} audio --url <url> --recipient <id> [options]
        - send a message with attached audio file

    mbutil ${this.getName()} video --url <url> --recipient <id> [options]
        - send a message with attached video file

    mbutil ${this.getName()} file --url <url> --recipient <id> [options]
        - send a message with attached file

Options:
    --recipient <id> - ID of the recepient
    --url <url> - URL of the attachment
`;
    }
}
exports.SendGroup = SendGroup;
