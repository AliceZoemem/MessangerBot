"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const minimist = require("minimist");
const logger_1 = require("../logger");
const bot_utils_1 = require("../utils/bot-utils");
const cli_logger_1 = require("./cli-logger");
class MBUtil {
    constructor() {
        this.groups = new Map();
    }
    bootstrap(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.registerGroups();
            const options = minimist(args);
            logger_1.default.level = options.debug ? "ALL" : "OFF";
            const [group, command] = options._;
            const groupHandler = this.groups.get(group);
            if (!groupHandler) {
                return Promise.resolve(`Usage: mbutil <group> [command] [options]
Groups: ${Array.from(this.groups.keys()).join(", ")}

Type 'mbutil <group> --help' to display usage for the group`);
            }
            if (options.help) {
                try {
                    yield groupHandler.usage();
                }
                catch (error) {
                    return Promise.resolve(error + MBUtil.USAGE_GLOBAL_OPTIONS);
                }
            }
            let accessToken;
            options.config && (accessToken = JSON.parse(fs.readFileSync(options.config, "utf8")).accessToken);
            accessToken = options.accessToken || accessToken;
            if (!accessToken) {
                return Promise.reject("no accessToken");
            }
            this.botUtils = new bot_utils_1.BotUtils(accessToken);
            try {
                cli_logger_1.cliout.info(yield groupHandler.execute(command, this.botUtils, options));
            }
            catch (error) {
                return error;
            }
        });
    }
    registerGroups() {
        const groups = require("./groups/");
        Object.keys(groups).forEach((key) => {
            const group = new groups[key]();
            this.groups.set(group.getName(), group);
        });
    }
}
MBUtil.USAGE_GLOBAL_OPTIONS = `
Global options:
    --config <path> - config json file
    --accessToken <token> - Page Access Token (overrides config file)
    --help - display usage for the group`;
exports.MBUtil = MBUtil;
