import { Webview } from ".";
import * as Graph from "./graph-api";
export declare class Api extends Graph.Api<Request> {
    protected accessToken: string;
    private reusableDao;
    constructor(accessToken: string);
    sendText(recipientId: string, text: string): Promise<Response>;
    sendImage(recipientId: string, url: string, reusable?: boolean): Promise<Response>;
    sendAudio(recipientId: string, url: string, reusable?: boolean): Promise<Response>;
    sendVideo(recipientId: string, url: string, reusable?: boolean): Promise<Response>;
    sendFile(recipientId: string, url: string, reusable?: boolean): Promise<Response>;
    typingOn(recipientId: string): Promise<Response>;
    typingOff(recipientId: string): Promise<Response>;
    markSeen(recipientId: string): Promise<Response>;
    send(recipientId: string, message: Message, notification?: NotificationType, tag?: Tag): Promise<Response>;
    private sendMediaAttachment(type, recipientId, url, reuse, notification?);
}
export interface Name {
    first_name: string;
    last_name: string;
}
export interface Recipient {
    id: string;
    phone_number: string;
    name: Name;
}
export declare enum ContentType {
    TEXT = "text",
    LOCATION = "location",
}
export interface TextQuickReply {
    content_type: ContentType.TEXT;
    title: string;
    payload: string;
    image_url?: string;
}
export interface LocationQuickReply {
    content_type: ContentType.LOCATION;
}
export declare type QuickReply = TextQuickReply | LocationQuickReply;
export declare enum TemplateType {
    GENERIC = "generic",
    BUTTON = "button",
    LIST = "list",
    OPEN_GRAPH = "open_graph",
    RECEIPT = "receipt",
}
export declare enum ImageAspectRatio {
    HORIZONTAL = "horizontal",
    SQUARE = "square",
}
export declare enum ButtonType {
    WEB_URL = "web_url",
    POSTBACK = "postback",
    CALL = "phone_number",
    SHARE = "element_share",
    LOGIN = "account_link",
    LOGOUT = "account_unlink",
}
export interface UrlButton {
    type: ButtonType.WEB_URL;
    title: string;
    url: string;
    webview_height_ratio?: Webview.HeightRatio;
    messenger_extensions?: boolean;
    fallback_url?: string;
    webview_share_button?: Webview.ShareButton;
}
export interface PostbackButton {
    type: ButtonType.POSTBACK;
    title: string;
    payload: string;
}
export interface CallButton {
    type: ButtonType.CALL;
    title: string;
    payload: string;
}
export interface ShareButton {
    type: ButtonType.SHARE;
    share_contents?: {
        attachment: GenericTemplateAttachment;
    };
}
export interface LoginButton {
    type: ButtonType.LOGIN;
    url: string;
}
export interface LogoutButton {
    type: ButtonType.LOGOUT;
}
export declare type Button = UrlButton | PostbackButton | CallButton | ShareButton | LoginButton | LogoutButton;
export interface DefaultAction {
    type: ButtonType.WEB_URL;
    url: string;
    webview_height_ratio?: Webview.HeightRatio;
    messenger_extensions?: boolean;
    fallback_url?: string;
    webview_share_button?: Webview.ShareButton;
}
export interface Element {
    title: string;
    subtitle?: string;
    image_url?: string;
    default_action?: DefaultAction;
    buttons?: Button[];
}
export interface GenericTemplate {
    template_type: TemplateType.GENERIC;
    sherable?: boolean;
    image_aspect_ratio?: ImageAspectRatio;
    elements: Element[];
}
export interface ButtonTemplate {
    template_type: TemplateType.BUTTON;
    text: string;
    buttons: Button[];
}
export declare enum ListTopElementStyle {
    LARGE = "large",
    COMPACT = "compact",
}
export interface ListTemplate {
    template_type: TemplateType.LIST;
    top_element_style?: ListTopElementStyle;
    elements: Element[];
    buttons?: Button[];
}
export interface OpenGraphElement {
    url: string;
    buttons?: Button[];
}
export interface OpenGraphTemplate {
    template_type: TemplateType.OPEN_GRAPH;
    elements: OpenGraphElement[];
}
export interface ReceiptElement {
    title: string;
    subtitle?: string;
    quantity?: number;
    price: number;
    currency?: string;
    image_url?: string;
}
export interface Address {
    street_1: string;
    street_2?: string;
    city: string;
    postal_code: string;
    state: string;
    country: string;
}
export interface PaymentSummary {
    subtotal?: number;
    shipping_cost?: number;
    total_tax?: number;
    total_cost: number;
}
export interface PaymentAdjustments {
    name: string;
    amount: number;
}
export interface ReceiptTemplate {
    template_type: TemplateType.RECEIPT;
    sherable?: boolean;
    recipient_name: string;
    merchant_name?: string;
    order_number: string;
    currency: string;
    payment_method: string;
    timestamp?: string;
    order_url?: string;
    elements?: ReceiptElement[];
    address?: Address;
    summary: PaymentSummary;
    adjustments?: PaymentAdjustments;
}
export declare type Template = GenericTemplate | ButtonTemplate | ListTemplate | ReceiptTemplate | OpenGraphTemplate;
export declare enum AttachmentType {
    IMAGE = "image",
    AUDIO = "audio",
    VIDEO = "video",
    FILE = "file",
    TEMPLATE = "template",
}
export interface MediaPayload {
    url?: string;
    is_reusable?: boolean;
    attachment_id?: string;
}
export interface ImageAttachment {
    type: AttachmentType.IMAGE;
    payload: MediaPayload;
}
export interface AudioAttachment {
    type: AttachmentType.AUDIO;
    payload: MediaPayload;
}
export interface VideoAttachment {
    type: AttachmentType.VIDEO;
    payload: MediaPayload;
}
export interface FileAttachment {
    type: AttachmentType.FILE;
    payload: MediaPayload;
}
export interface TemplateAttachment {
    type: AttachmentType.TEMPLATE;
    payload: Template;
}
export interface GenericTemplateAttachment {
    type: AttachmentType.TEMPLATE;
    payload: GenericTemplate;
}
export declare type MediaAttachment = ImageAttachment | AudioAttachment | VideoAttachment | FileAttachment;
export declare type Attachment = MediaAttachment | TemplateAttachment;
export interface AbstractMessage {
    quick_replies?: QuickReply[];
    metadata?: string;
}
export interface TextMessage extends AbstractMessage {
    text: string;
}
export interface AttachmentMessage extends AbstractMessage {
    attachment: Attachment;
}
export declare type Message = TextMessage | AttachmentMessage;
export declare enum SenderAction {
    TYPING_ON = "typing_on",
    TYPING_OFF = "typing_off",
    MARK_SEEN = "mark_seen",
}
export declare enum NotificationType {
    REGULAR = "REGULAR",
    SILENT_PUSH = "SILENT_PUSH",
    NO_PUSH = "NO_PUSH",
}
export declare enum Tag {
    ACCOUNT_UPDATE = "ACCOUNT_UPDATE",
    PAYMENT_UPDATE = "PAYMENT_UPDATE",
    PERSONAL_FINANCE_UPDATE = "PERSONAL_FINANCE_UPDATE",
    SHIPPING_UPDATE = "SHIPPING_UPDATE",
    RESERVATION_UPDATE = "RESERVATION_UPDATE",
    ISSUE_RESOLUTION = "ISSUE_RESOLUTION",
    APPOINTMENT_UPDATE = "APPOINTMENT_UPDATE",
    GAME_EVENT = "GAME_EVENT",
    TRANSPORTATION_UPDATE = "TRANSPORTATION_UPDATE",
    FEATURE_FUNCTIONALITY_UPDATE = "FEATURE_FUNCTIONALITY_UPDATE",
    TICKET_UPDATE = "TICKET_UPDATE",
}
export interface Request extends Graph.Request {
    recipient: string;
    message?: string;
    sender_action?: SenderAction;
    notification_type?: NotificationType;
    tag?: Tag;
}
export interface Response {
    recipient_id: string;
    message_id: string;
    attachment_id?: string;
}
export interface Error {
    message: string;
    type: string;
    code: number;
    error_subcode: number;
    fbtrace_id: string;
}
