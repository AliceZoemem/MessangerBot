"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
const reusable_dao_1 = require("../store/reusable-dao");
const Graph = require("./graph-api");
class Api extends Graph.Api {
    constructor(accessToken) {
        super(accessToken, Graph.Endpoint.MESSAGES);
        this.accessToken = accessToken;
        this.reusableDao = new reusable_dao_1.ReusableDao();
    }
    sendText(recipientId, text) {
        return this.send(recipientId, { text });
    }
    sendImage(recipientId, url, reusable = false) {
        return this.sendMediaAttachment(AttachmentType.IMAGE, recipientId, url, reusable);
    }
    sendAudio(recipientId, url, reusable = false) {
        return this.sendMediaAttachment(AttachmentType.AUDIO, recipientId, url, reusable);
    }
    sendVideo(recipientId, url, reusable = false) {
        return this.sendMediaAttachment(AttachmentType.VIDEO, recipientId, url, reusable);
    }
    sendFile(recipientId, url, reusable = false) {
        return this.sendMediaAttachment(AttachmentType.FILE, recipientId, url, reusable);
    }
    typingOn(recipientId) {
        return this.sendRequest({
            recipient: JSON.stringify({
                id: recipientId
            }),
            sender_action: SenderAction.TYPING_ON
        });
    }
    typingOff(recipientId) {
        return this.sendRequest({
            recipient: JSON.stringify({
                id: recipientId
            }),
            sender_action: SenderAction.TYPING_OFF
        });
    }
    markSeen(recipientId) {
        return this.sendRequest({
            recipient: JSON.stringify({
                id: recipientId
            }),
            sender_action: SenderAction.MARK_SEEN
        });
    }
    send(recipientId, message, notification, tag) {
        const request = {
            recipient: JSON.stringify({
                id: recipientId
            }),
            message: JSON.stringify(message)
        };
        notification && (request.notification_type = notification);
        tag && (request.tag = tag);
        return this.sendRequest(request);
    }
    sendMediaAttachment(type, recipientId, url, reuse, notification) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!url) {
                return Promise.reject("no URL");
            }
            if (reuse) {
                const reusable = this.reusableDao.get(url);
                if (reusable) {
                    logger_1.default.info(`re-using attachment '{url}' (attachmentId=${reusable.id})`);
                    return this.send(recipientId, {
                        attachment: {
                            type,
                            payload: {
                                attachment_id: reusable.id
                            }
                        }
                    }, notification);
                }
            }
            const response = yield this.send(recipientId, {
                attachment: {
                    type,
                    payload: {
                        url,
                        is_reusable: reuse
                    }
                }
            }, notification);
            if (reuse) {
                this.reusableDao.save({ url, id: response.attachment_id });
            }
            return response;
        });
    }
}
exports.Api = Api;
var ContentType;
(function (ContentType) {
    ContentType["TEXT"] = "text";
    ContentType["LOCATION"] = "location";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
var TemplateType;
(function (TemplateType) {
    TemplateType["GENERIC"] = "generic";
    TemplateType["BUTTON"] = "button";
    TemplateType["LIST"] = "list";
    TemplateType["OPEN_GRAPH"] = "open_graph";
    TemplateType["RECEIPT"] = "receipt";
})(TemplateType = exports.TemplateType || (exports.TemplateType = {}));
var ImageAspectRatio;
(function (ImageAspectRatio) {
    ImageAspectRatio["HORIZONTAL"] = "horizontal";
    ImageAspectRatio["SQUARE"] = "square";
})(ImageAspectRatio = exports.ImageAspectRatio || (exports.ImageAspectRatio = {}));
var ButtonType;
(function (ButtonType) {
    ButtonType["WEB_URL"] = "web_url";
    ButtonType["POSTBACK"] = "postback";
    ButtonType["CALL"] = "phone_number";
    ButtonType["SHARE"] = "element_share";
    ButtonType["LOGIN"] = "account_link";
    ButtonType["LOGOUT"] = "account_unlink";
})(ButtonType = exports.ButtonType || (exports.ButtonType = {}));
var ListTopElementStyle;
(function (ListTopElementStyle) {
    ListTopElementStyle["LARGE"] = "large";
    ListTopElementStyle["COMPACT"] = "compact";
})(ListTopElementStyle = exports.ListTopElementStyle || (exports.ListTopElementStyle = {}));
var AttachmentType;
(function (AttachmentType) {
    AttachmentType["IMAGE"] = "image";
    AttachmentType["AUDIO"] = "audio";
    AttachmentType["VIDEO"] = "video";
    AttachmentType["FILE"] = "file";
    AttachmentType["TEMPLATE"] = "template";
})(AttachmentType = exports.AttachmentType || (exports.AttachmentType = {}));
var SenderAction;
(function (SenderAction) {
    SenderAction["TYPING_ON"] = "typing_on";
    SenderAction["TYPING_OFF"] = "typing_off";
    SenderAction["MARK_SEEN"] = "mark_seen";
})(SenderAction = exports.SenderAction || (exports.SenderAction = {}));
var NotificationType;
(function (NotificationType) {
    NotificationType["REGULAR"] = "REGULAR";
    NotificationType["SILENT_PUSH"] = "SILENT_PUSH";
    NotificationType["NO_PUSH"] = "NO_PUSH";
})(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
var Tag;
(function (Tag) {
    Tag["ACCOUNT_UPDATE"] = "ACCOUNT_UPDATE";
    Tag["PAYMENT_UPDATE"] = "PAYMENT_UPDATE";
    Tag["PERSONAL_FINANCE_UPDATE"] = "PERSONAL_FINANCE_UPDATE";
    Tag["SHIPPING_UPDATE"] = "SHIPPING_UPDATE";
    Tag["RESERVATION_UPDATE"] = "RESERVATION_UPDATE";
    Tag["ISSUE_RESOLUTION"] = "ISSUE_RESOLUTION";
    Tag["APPOINTMENT_UPDATE"] = "APPOINTMENT_UPDATE";
    Tag["GAME_EVENT"] = "GAME_EVENT";
    Tag["TRANSPORTATION_UPDATE"] = "TRANSPORTATION_UPDATE";
    Tag["FEATURE_FUNCTIONALITY_UPDATE"] = "FEATURE_FUNCTIONALITY_UPDATE";
    Tag["TICKET_UPDATE"] = "TICKET_UPDATE";
})(Tag = exports.Tag || (exports.Tag = {}));
