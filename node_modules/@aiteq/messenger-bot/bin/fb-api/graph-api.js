"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const logger_1 = require("../logger");
class Api {
    constructor(accessToken, endpoint = "", method, version) {
        this.accessToken = accessToken;
        this.endpoint = endpoint;
        this.method = method;
        this.version = version;
        this.client = axios_1.default.create({
            baseURL: `https://graph.facebook.com/v${version || Api.DEFAULT_VERSION}/${endpoint}`,
            headers: { "Content-Type": "application/json" },
            responseType: "json"
        });
    }
    sendRequest(data, config = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            config.method = config.method || this.method || Method.POST;
            data.access_token = this.accessToken;
            if (config.method === Method.GET) {
                config.params = data;
            }
            else if (config.method === Method.POST || config.method === Method.DELETE) {
                config.data = data;
            }
            else {
                return Promise.reject("method not supporetd: " + config.method);
            }
            try {
                logger_1.default.debug("sending:", config.method, this.client.defaults.baseURL + (config.url || ""));
                logger_1.default.debug("config:", JSON.stringify(config));
                logger_1.default.debug("data:", JSON.stringify(data));
                const response = yield this.client.request(config);
                logger_1.default.debug("response:", response.status, response.statusText);
                logger_1.default.debug("data:", response.data);
                if (response.data.result && response.data.result !== "success") {
                    logger_1.default.error("result:", response.data.result);
                    return Promise.reject(response.data.result);
                }
                return response.data;
            }
            catch (error) {
                logger_1.default.error(error.message);
                error.response && logger_1.default.debug(error.response.data);
                let message = error.message;
                try {
                    logger_1.default.error(error.response.data.error.message);
                    message = error.response.data.error.message;
                }
                catch (error) {
                }
                return Promise.reject(message);
            }
        });
    }
}
Api.DEFAULT_VERSION = "2.9";
exports.Api = Api;
var Method;
(function (Method) {
    Method["GET"] = "get";
    Method["POST"] = "post";
    Method["DELETE"] = "delete";
})(Method = exports.Method || (exports.Method = {}));
var Endpoint;
(function (Endpoint) {
    Endpoint["MESSAGES"] = "me/messages";
    Endpoint["MESSENGER_PROFILE"] = "me/messenger_profile";
    Endpoint["MESSENGER_CODES"] = "me/messenger_codes";
    Endpoint["USER_PROFILE"] = "USER-PROFILE";
})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
