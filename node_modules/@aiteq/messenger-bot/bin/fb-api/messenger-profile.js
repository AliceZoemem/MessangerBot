"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const logger_1 = require("../logger");
const Graph = require("./graph-api");
class Api extends Graph.Api {
    constructor(accessToken) {
        super(accessToken, Graph.Endpoint.MESSENGER_PROFILE);
        this.accessToken = accessToken;
    }
    setGetStartedButton(data) {
        const payload = {
            src: _1.Webhook.PostbackSource.GET_STARTED_BUTTON
        };
        payload.data = data;
        return this.setField(Field.GET_STARTED_BUTTON, {
            payload: JSON.stringify(payload)
        });
    }
    getGetStartedButton() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.getField(Field.GET_STARTED_BUTTON);
                response && (response.payload = JSON.parse(response.payload));
                return response;
            }
            catch (error) {
                return Promise.reject((error));
            }
        });
    }
    deleteGetStartedButton() {
        return this.deleteField([Field.GET_STARTED_BUTTON]);
    }
    setGreeting(greeting) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.setField(Field.GREETING, typeof greeting === "string" ?
                [{
                        locale: "default",
                        text: greeting
                    }] : greeting);
        });
    }
    getGreeting() {
        return this.getField(Field.GREETING);
    }
    deleteGreeting() {
        return this.deleteField([Field.GREETING]);
    }
    setPersistentMenu(menu) {
        return this.setField(Field.PERSISTENT_MENU, menu);
    }
    getPersistentMenu() {
        return this.getField(Field.PERSISTENT_MENU);
    }
    deletePersistentMenu() {
        return this.deleteField([Field.PERSISTENT_MENU]);
    }
    whitelistDomains(domains) {
        return this.setField(Field.DOMAIN_WHITELIST, domains);
    }
    getWhitelistedDomains() {
        return this.getField(Field.DOMAIN_WHITELIST);
    }
    deleteDomainWhitelist() {
        return this.deleteField([Field.DOMAIN_WHITELIST]);
    }
    setAccountLinkingUrl(url) {
        return this.setField(Field.ACCOUNT_LINKING_URL, url);
    }
    getAccountLinkingUrl() {
        return this.getField(Field.ACCOUNT_LINKING_URL);
    }
    deleteAccountLinkingUrl() {
        return this.deleteField([Field.ACCOUNT_LINKING_URL]);
    }
    setTargetAudience(type, whitelist = [], blacklist = []) {
        const audience = {
            audience_type: type
        };
        type === TargetAudienceType.CUSTOM && (audience.countries = { whitelist, blacklist });
        return this.setField(Field.TARGET_AUDIENCE, audience);
    }
    getTargetAudience() {
        return this.getField(Field.TARGET_AUDIENCE);
    }
    deleteTargetAudience() {
        return this.deleteField([Field.TARGET_AUDIENCE]);
    }
    setChatExtensionHomeUrl(url, options, inTest = false, shareButton = true) {
        return this.setField(Field.CHAT_EXTENSION_WEB_URL, {
            url,
            webview_height_ratio: _1.Webview.HeightRatio.TALL,
            webview_share_button: !options || options.shareButton ? _1.Webview.ShareButton.SHOW : _1.Webview.ShareButton.HIDE,
            in_test: options && options.inTest
        });
    }
    getChatExtensionHomeUrl() {
        return this.getField(Field.CHAT_EXTENSION_WEB_URL);
    }
    deleteChatExtensionHomeUrl() {
        return this.deleteField([Field.CHAT_EXTENSION_WEB_URL]);
    }
    setField(field, data) {
        logger_1.default.debug(`setting the field '${field}' to`, JSON.stringify(data, null, 2));
        const payload = {};
        payload[field] = data;
        return this.sendRequest(payload);
    }
    getField(field) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.default.debug("reading the field", field);
            try {
                const data = (yield this.sendRequest({
                    fields: field
                }, { method: Graph.Method.GET })).data;
                return data.length > 0 ? data[0][field] : undefined;
            }
            catch (error) {
                return Promise.reject(error);
            }
        });
    }
    deleteField(fields) {
        logger_1.default.debug("deleting fields", fields);
        return this.sendRequest({
            fields
        }, { method: Graph.Method.DELETE });
    }
}
exports.Api = Api;
var MenuItemType;
(function (MenuItemType) {
    MenuItemType["WEB_URL"] = "web_url";
    MenuItemType["POSTBACK"] = "postback";
    MenuItemType["NESTED"] = "nested";
})(MenuItemType = exports.MenuItemType || (exports.MenuItemType = {}));
exports.GreetingName = {
    FIRST_NAME: "user_first_name",
    LAST_NAME: "user_last_name",
    FULL_NAME: "user_full_name",
};
var TargetAudienceType;
(function (TargetAudienceType) {
    TargetAudienceType["ALL"] = "all";
    TargetAudienceType["CUSTOM"] = "custom";
    TargetAudienceType["NONE"] = "none";
})(TargetAudienceType = exports.TargetAudienceType || (exports.TargetAudienceType = {}));
var Field;
(function (Field) {
    Field["PERSISTENT_MENU"] = "persistent_menu";
    Field["GET_STARTED_BUTTON"] = "get_started";
    Field["GREETING"] = "greeting";
    Field["DOMAIN_WHITELIST"] = "whitelisted_domains";
    Field["ACCOUNT_LINKING_URL"] = "account_linking_url";
    Field["TARGET_AUDIENCE"] = "target_audience";
    Field["CHAT_EXTENSION_WEB_URL"] = "home_url";
})(Field = exports.Field || (exports.Field = {}));
