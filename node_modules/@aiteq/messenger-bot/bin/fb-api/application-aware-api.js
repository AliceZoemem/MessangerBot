"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
const Application = require("./application");
const Graph = require("./graph-api");
class Api extends Graph.Api {
    constructor(pageAccessToken, appSecret, endpoint) {
        super(undefined, "", Graph.Method.GET);
        this.pageAccessToken = pageAccessToken;
        this.appSecret = appSecret;
        this.endpoint = endpoint;
        this.appInfo = new Application.Api(pageAccessToken).getAppInfo()
            .catch((reason) => logger_1.default.error("couldn't get fb app info:", reason));
    }
    sendRequest(data, config = {}) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this.appId = this.appId || (yield this.appInfo).id;
            config.url = this.appId + "/" + this.endpoint;
            this.accessToken = this.accessToken || this.appId + "|" + this.appSecret;
            return _super("sendRequest").call(this, data, config);
        });
    }
}
exports.Api = Api;
