import { Webhook, Webview } from ".";
import * as Graph from "./graph-api";
export declare class Api extends Graph.Api<Request> {
    protected accessToken: string;
    constructor(accessToken: string);
    setGetStartedButton(data?: any): Promise<Response>;
    getGetStartedButton(): Promise<GetStartedButton>;
    deleteGetStartedButton(): Promise<Response>;
    setGreeting(greeting: string | Greeting[]): Promise<Response>;
    getGreeting(): Promise<Greeting[]>;
    deleteGreeting(): Promise<Response>;
    setPersistentMenu(menu: PersistentMenu[]): Promise<Response>;
    getPersistentMenu(): Promise<PersistentMenu[]>;
    deletePersistentMenu(): Promise<Response>;
    whitelistDomains(domains: string[]): Promise<Response>;
    getWhitelistedDomains(): Promise<string[]>;
    deleteDomainWhitelist(): Promise<Response>;
    setAccountLinkingUrl(url: string): Promise<Response>;
    getAccountLinkingUrl(): Promise<string>;
    deleteAccountLinkingUrl(): Promise<Response>;
    setTargetAudience(type: TargetAudienceType, whitelist?: string[], blacklist?: string[]): Promise<Response>;
    getTargetAudience(): Promise<TargetAudience>;
    deleteTargetAudience(): Promise<Response>;
    setChatExtensionHomeUrl(url: string, options?: {
        inTest: boolean;
        shareButton: boolean;
    }, inTest?: boolean, shareButton?: boolean): Promise<Response>;
    getChatExtensionHomeUrl(): Promise<string>;
    deleteChatExtensionHomeUrl(): Promise<Response>;
    private setField(field, data);
    private getField(field);
    private deleteField(fields);
}
export interface GetStartedButton {
    payload: {
        src: Webhook.PostbackSource;
        data?: any;
    };
}
export declare enum MenuItemType {
    WEB_URL = "web_url",
    POSTBACK = "postback",
    NESTED = "nested",
}
export interface Menu {
    call_to_actions?: MenuItem[];
}
export interface MenuItem extends Menu {
    type: MenuItemType;
    title: string;
    url?: string;
    payload?: string;
    webview_height_ratio?: Webview.HeightRatio;
    messenger_extensions?: boolean;
    fallback_url?: string;
    webview_share_button?: Webview.ShareButton;
}
export interface PersistentMenu extends Menu {
    locale: string;
    composer_input_disabled: boolean;
}
export interface Greeting {
    locale: string;
    text: string;
}
export declare const GreetingName: {
    FIRST_NAME: string;
    LAST_NAME: string;
    FULL_NAME: string;
};
export declare enum TargetAudienceType {
    ALL = "all",
    CUSTOM = "custom",
    NONE = "none",
}
export interface TargetAudience {
    audience_type: TargetAudienceType;
    countries?: {
        whitelist?: string[];
        blacklist?: string[];
    };
}
export interface ChatExtensionHomeUrl {
    url: string;
    webview_height_ratio: Webview.HeightRatio;
    webview_share_button: Webview.ShareButton;
    in_test: boolean;
}
export interface Request extends Graph.Request {
    persistent_menu?: PersistentMenu[];
    get_started?: GetStartedButton;
    greeting?: Greeting[];
    whitelisted_domains?: string[];
    account_linking_url?: string;
    target_audience?: TargetAudience;
    home_url?: ChatExtensionHomeUrl;
    fields?: Field | Field[];
}
export declare enum Field {
    PERSISTENT_MENU = "persistent_menu",
    GET_STARTED_BUTTON = "get_started",
    GREETING = "greeting",
    DOMAIN_WHITELIST = "whitelisted_domains",
    ACCOUNT_LINKING_URL = "account_linking_url",
    TARGET_AUDIENCE = "target_audience",
    CHAT_EXTENSION_WEB_URL = "home_url",
}
export interface Response {
    result: string;
}
