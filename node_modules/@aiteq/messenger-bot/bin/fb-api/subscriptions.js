"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApplicationAware = require("./application-aware-api");
class Api extends ApplicationAware.Api {
    constructor(pageAccessToken, appSecret) {
        super(pageAccessToken, appSecret, "subscriptions");
        this.pageAccessToken = pageAccessToken;
        this.appSecret = appSecret;
    }
    getWebhookSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.sendRequest({})).data;
        });
    }
    getSubscription(topic) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriptions = yield this.getWebhookSubscriptions();
            for (const subscr of subscriptions) {
                if (subscr.object === topic) {
                    return subscr;
                }
            }
            return Promise.reject(`no subscription for topic '${topic}'`);
        });
    }
    getCallbackUrl(topic) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return (yield this.getSubscription(topic)).callback_url;
            }
            catch (error) {
                return Promise.reject(error);
            }
        });
    }
}
exports.Api = Api;
var SubscriptionTopic;
(function (SubscriptionTopic) {
    SubscriptionTopic["PAGE"] = "page";
    SubscriptionTopic["USER"] = "user";
    SubscriptionTopic["PERMISSIONS"] = "permissions";
    SubscriptionTopic["PAYMENTS"] = "payments";
})(SubscriptionTopic = exports.SubscriptionTopic || (exports.SubscriptionTopic = {}));
