"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fb_api_1 = require("../fb-api");
const message_builder_1 = require("./message-builder");
class ButtonHoldingTemplateMessageBuilder extends message_builder_1.MessageBuilder {
    constructor() {
        super();
        this.message = {
            attachment: {
                type: fb_api_1.Send.AttachmentType.TEMPLATE,
                payload: null
            }
        };
    }
    build() {
        this.message.attachment.payload = this.template;
        return super.build();
    }
    addCallButton(title, phoneNumber) {
        this.addButton({
            type: fb_api_1.Send.ButtonType.CALL,
            title,
            payload: phoneNumber
        });
        return this;
    }
    addLoginButton(url) {
        this.addButton({
            type: fb_api_1.Send.ButtonType.LOGIN,
            url
        });
        return this;
    }
    addLogoutButton() {
        this.addButton({
            type: fb_api_1.Send.ButtonType.LOGOUT
        });
        return this;
    }
    addPostbackButton(title, id, data) {
        this.addButton({
            type: fb_api_1.Send.ButtonType.POSTBACK,
            title,
            payload: JSON.stringify({
                src: fb_api_1.Webhook.PostbackSource.POSTBACK_BUTTON,
                id,
                data
            })
        });
        return this;
    }
    addShareButton(builder) {
        this.addButton({
            type: fb_api_1.Send.ButtonType.SHARE
        });
        return this;
    }
    addUrlButton(title, url, options) {
        const button = {
            type: fb_api_1.Send.ButtonType.WEB_URL,
            title,
            url
        };
        if (options) {
            options.fallbackUrl && (button.fallback_url = options.fallbackUrl);
            typeof options.messengerExtensions === "boolean" && (button.messenger_extensions = options.messengerExtensions);
            options.webviewHeightRatio && (button.webview_height_ratio = options.webviewHeightRatio);
            typeof options.webviewShareButton === "boolean" && (button.webview_share_button = options.webviewShareButton === true ? fb_api_1.Webview.ShareButton.SHOW : fb_api_1.Webview.ShareButton.HIDE);
        }
        this.addButton(button);
        return this;
    }
    addExtensionButton(title, extension, options) {
        const button = {
            type: fb_api_1.Send.ButtonType.WEB_URL,
            title,
            url: extension.getUrl()
        };
        if (options) {
            button.messenger_extensions = true;
            options.fallbackUrl && (button.fallback_url = options.fallbackUrl);
            options.webviewHeightRatio && (button.webview_height_ratio = options.webviewHeightRatio);
            typeof options.webviewShareButton === "boolean" && (button.webview_share_button = options.webviewShareButton === true ? fb_api_1.Webview.ShareButton.SHOW : fb_api_1.Webview.ShareButton.HIDE);
        }
        this.addButton(button);
        return this;
    }
}
exports.ButtonHoldingTemplateMessageBuilder = ButtonHoldingTemplateMessageBuilder;
