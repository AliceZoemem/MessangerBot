"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const builder_1 = require("./builder");
const menu_builder_1 = require("./menu-builder");
class PersistentMenuBuilder extends builder_1.Builder {
    constructor(menuDef) {
        super();
        this.menuDef = menuDef;
        this.menus = new Array();
        if (menuDef) {
            menuDef = Array.isArray(menuDef) ? menuDef : [menuDef];
            menuDef.forEach((localMenuDef) => {
                this.addMenu(localMenuDef.locale, !!localMenuDef.composerInputDisabled, this.buildMenu(localMenuDef.items));
            });
        }
    }
    static createMenu() {
        return new menu_builder_1.MenuBuilder();
    }
    static checkMenu(menu) {
        if (menu.composer_input_disabled && (!menu.call_to_actions || menu.call_to_actions.length === 0)) {
            throw new Error("at least one menu item must be added when composer input is disabled (see https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu#post)");
        }
        return menu;
    }
    build() {
        return this.menus;
    }
    addMenu(locale, composerInputDisabled, menu) {
        this.menus.push(PersistentMenuBuilder.checkMenu({
            locale,
            composer_input_disabled: composerInputDisabled,
            call_to_actions: menu.build()
        }));
        return this;
    }
    buildMenu(items) {
        const menu = PersistentMenuBuilder.createMenu();
        items.forEach((item) => {
            if (item.url) {
                menu.addWebUrlMenuItem(item.title, item.url, {
                    webviewHeightRatio: item.webviewHeightRatio,
                    messengerExtensions: item.messengerExtensions,
                    shareButton: item.shareButton,
                    fallbackUrl: item.fallbackUrl
                });
            }
            else if (item.id) {
                menu.addPostbackMenuItem(item.title, item.id, {
                    data: item.data,
                    webviewHeightRatio: item.webviewHeightRatio,
                    messengerExtensions: item.messengerExtensions,
                    shareButton: item.shareButton,
                    fallbackUrl: item.fallbackUrl
                });
            }
            else if (item.items) {
                menu.addSubmenu(item.title, this.buildMenu(item.items));
            }
        });
        return menu;
    }
}
exports.PersistentMenuBuilder = PersistentMenuBuilder;
