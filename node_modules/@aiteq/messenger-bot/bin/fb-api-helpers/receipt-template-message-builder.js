"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fb_api_1 = require("../fb-api");
const template_message_builder_1 = require("./template-message-builder");
class ReceiptTemplateMessageBuilder extends template_message_builder_1.TemplateMessageBuilder {
    constructor(recipientName, orderNumber, currency, paymentMethod, totalCost) {
        super();
        this.template = {
            template_type: fb_api_1.Send.TemplateType.RECEIPT,
            recipient_name: recipientName,
            order_number: orderNumber,
            currency,
            payment_method: paymentMethod,
            summary: { total_cost: totalCost }
        };
    }
    setSherable(sherable) {
        this.template.sherable = sherable;
        return this;
    }
    setMerchantName(merchantName) {
        this.template.merchant_name = merchantName;
        return this;
    }
    setTimestamp(timestamp) {
        this.template.timestamp = timestamp;
        return this;
    }
    setOrderUrl(orderUrl) {
        this.template.order_url = orderUrl;
        return this;
    }
    addElement(elementBuilder) {
        this.template.elements = this.template.elements || new Array();
        if (this.template.elements.length === 100) {
            throw new Error("couldn't add next Receipt Element to Receipt Tepmplate message (only 100 elements is allowed)");
        }
        this.template.elements.push(elementBuilder.build());
        return this;
    }
    setAddress(address) {
        this.template.address = address;
        return this;
    }
    setSubtotal(subtotal) {
        this.template.summary.subtotal = subtotal;
        return this;
    }
    setShippingCost(shippingCost) {
        this.template.summary.shipping_cost = shippingCost;
        return this;
    }
    setTotalTax(totalTax) {
        this.template.summary.total_tax = totalTax;
        return this;
    }
    setPaymentAdjustments(adjustments) {
        this.template.adjustments = adjustments;
        return this;
    }
}
exports.ReceiptTemplateMessageBuilder = ReceiptTemplateMessageBuilder;
