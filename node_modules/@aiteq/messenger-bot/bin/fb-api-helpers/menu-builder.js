"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fb_api_1 = require("../fb-api");
const builder_1 = require("./builder");
class MenuBuilder extends builder_1.Builder {
    constructor() {
        super(...arguments);
        this.actions = new Array();
    }
    build() {
        return this.actions;
    }
    addWebUrlMenuItem(title, url, options) {
        options = options || {};
        this.addMenuItem({ type: fb_api_1.MessengerProfile.MenuItemType.WEB_URL, title, url }, options);
        return this;
    }
    addPostbackMenuItem(title, id, options) {
        options = options || {};
        this.addMenuItem({
            type: fb_api_1.MessengerProfile.MenuItemType.POSTBACK,
            title,
            payload: JSON.stringify({
                src: fb_api_1.Webhook.PostbackSource.PERSISTENT_MENU,
                id,
                data: options.data
            })
        }, options);
        return this;
    }
    addSubmenu(title, submenu) {
        this.addMenuItem({ type: fb_api_1.MessengerProfile.MenuItemType.NESTED, title, call_to_actions: submenu.actions });
        return this;
    }
    addMenuItem(item, options) {
        options = options || {};
        options.webviewHeightRatio && (item.webview_height_ratio = options.webviewHeightRatio);
        options.messengerExtensions && (item.messenger_extensions = options.messengerExtensions);
        options.fallbackUrl && (item.fallback_url = options.fallbackUrl);
        item.webview_share_button = options.shareButton === false ? fb_api_1.Webview.ShareButton.HIDE : fb_api_1.Webview.ShareButton.SHOW;
        this.actions.push(item);
    }
}
exports.MenuBuilder = MenuBuilder;
